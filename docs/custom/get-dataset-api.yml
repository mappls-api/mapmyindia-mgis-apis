openapi: 3.0.1
info:
  title: 'Get Dataset API'
  description: |-
    *This API reads a dataset with options like read entire dataset, read only specific attributes of a dataset etc.<br><br><hr><br>[<img src="https://about.mappls.com/images/mappls-logo.svg" height="60"/> </p>](https://about.mappls.com/api/)

    On a Mission to <b>"Make our world better through maps, location technologies & IoT"</b>, MapmyIndia is continuously enabling real time hyper-local information access through its map & location services. mGIS APIs are a part of mGIS platform and the document describes APIs usage and specifications for their integration into an application. The document covers :
    <ul><li>List of APIs</ul></li> 
    <ul><li>Explanation of resources and query parameters</ul></li>
    <ul><li>Listing of response structure</ul></li>

    ## Important notes
     <ul><li><b>URLs</b>: the urls to use for UAT and Production are:  <ul><li>
     <b>Production</b>:
    <code>https://mgis-api.mappls.com/</code></li><li>
     <b>UAT</b>:<code>https://mgis-preprod.mappls.in/</code><li> To call our API, the
    endpoint requires access-token authorization and the <code>access-token</code> needs to be entered. For example <code>https://mgis.mappls.in/query_validation </code> <br> Pass header as <code>Authorization:Bearer access_token</code>   </li> </ul> <li>For any issues or questions please submit it to our support : <a href="mailto:apisupport@mapmyindia.com" target="_blank">API Support</a>.  If you have some non-technical or commercial queries, contact your service account manager</li></ul>
  contact:
    name: MapmyIndia API Support
    url: 'https://www.mapmyindia.com/api/#f_cont'
    email: apisupport@mapmyindia.com
  termsOfService: 'https://www.mapmyindia.com/api/terms-&-conditions'
  version: V1.0.0
tags:
  - name: 'Get Dataset API'
    description: 'This API reads a dataset with options like read entire dataset, read only specific attributes of a dataset etc.'
servers:
  - url: 'https://mgis-api.mappls.com/'
    description: Production server for mGIS APIs
  - url: 'https://mgis-preprod.mappls.in/'
    description: UAT server for mGIS APIs testing
paths:
  /getDataset:
    get:
      tags:
        - 'Get Dataset API'
      summary: Fetches the entire dataset or selected part of it.
      description: 'Fetches the entire dataset. You can perform ''order(sort) By'' and ''groupBy'' in ''query''. This has 3 cases:<li>Only Order By</li> <li>Only Group By</li> <li>Both Order By and Group By together</li>'
      operationId: getDatasetId
      parameters:
        - $ref: '#/components/parameters/datasetNmeParam'
        - $ref: '#/components/parameters/groupByDatasetParam'
        - $ref: '#/components/parameters/propertyNameParam'
        - $ref: '#/components/parameters/orderByDatasetParam'
        - $ref: '#/components/parameters/orderByPropertyDatasetParam'
        - $ref: '#/components/parameters/startIndexParam'
        - $ref: '#/components/parameters/countParam'
        - $ref: '#/components/parameters/bboxParam'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDatasetRes'
        '206':
          description: Impartial Content.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject206'
        '400':
          description: 'Bad Request, User made an error while creating a valid request.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject400'
        '404':
          description: No data found in database.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObjectCommon404'
        '422':
          description: Parameter missing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObjectCommon'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorObject500'
      deprecated: false
components:
  parameters:
    datasetNmeParam:
      name: datasetNme
      in: query
      description: The dataset name of whose information has to be fetched.
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: india
    queryParam11:
      name: query
      in: query
      description: the cql_filter to be applied on the layer.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: id=256
    saveAsNewDataset:
      name: saveAsNewDataset
      in: query
      description: Boolean if true cross join result will be saved in to db as new table.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: true
    newDatasetNme:
      name: newDatasetNme
      in: query
      description: Name of new Table(mandatory if saveAsNewDataset = true)
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: JoinTable
    datasetNmeParamGeom:
      name: datasetNme
      in: query
      description: The dataset on which geometric operation has to be performed. It is mandatory in case of performing geometric operations within the datset.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: geo
    functionNameGeom:
      name: functionNme
      in: query
      description: 'Geometric operators which are acceptable are: <li>For user defined geometry: <b>intersection, area, buffer, distance, centroid, isEmpty, length and endPoint</b> <li>For within the dataset: <b>area, buffer, centroid, isEmpty, length and endPoint</b>'
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: area
    distance:
      name: distance
      in: query
      description: 'Mandatory in case when opertaor used is Buffer, else it is not required.'
      schema:
        type: number
      example: 10
    distanceJoin:
      name: distance
      in: query
      description: 'Mandatory in case when opertaor used is DWithin, else it is not required.'
      schema:
        type: number
      example: 10
    Geometry1:
      name: geom1
      in: query
      description: user defined geometry in terms of geoJSON
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: |-
        {
        "type": "Polygon",
        "coordinates": [
        [
        [
        75.9375,
        23.725011735951796
        ],
        [
        78.92578124999999,
        23.725011735951796
        ],
        [
        78.92578124999999,
        26.115985925333536
        ],
        [
        75.9375,
        26.115985925333536
        ],
        [
        75.9375,
        23.725011735951796
        ]
        ]
        ]
        }
    Geometry1Geom:
      name: geom1
      in: query
      description: user defined geometry in terms of geoJSON. It is mandatory in case of user-defined geometry for all the geometric opertaions.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: |-
        {
        "type": "Polygon",
        "coordinates": [
        [
        [
        75.9375,
        23.725011735951796
        ],
        [
        78.92578124999999,
        23.725011735951796
        ],
        [
        78.92578124999999,
        26.115985925333536
        ],
        [
        75.9375,
        26.115985925333536
        ],
        [
        75.9375,
        23.725011735951796
        ]
        ]
        ]
        }
    Geometry2:
      name: geom2
      in: query
      description: user defined geometry in terms of geoJSON(mandatory in case of  user defined geom for intersection and distance)
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: '{ "type": "Polygon", "coordinates": [ [ [ 75.9375, 23.725011735951796 ], [ 78.92578124999999, 23.725011735951796 ], [ 78.92578124999999, 26.115985925333536 ], [ 75.9375, 26.115985925333536 ], [ 75.9375, 23.725011735951796 ] ] ] }'
    Geometry2Geom:
      name: geom2
      in: query
      description: user defined geometry in terms of geoJSON. It is mandatory in case of user-defined geometry for distance and intersection geometric opertaions.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: '{ "type": "Polygon", "coordinates": [ [ [ 75.9375, 23.725011735951796 ], [ 78.92578124999999, 23.725011735951796 ], [ 78.92578124999999, 26.115985925333536 ], [ 75.9375, 26.115985925333536 ], [ 75.9375, 23.725011735951796 ] ] ] }'
    columnname:
      name: columnname
      in: query
      description: column name on which the aggregate operation has to be performed
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: anzee
    operationname:
      name: operation
      in: query
      description: 'aggregate operators which are acceptable are Count, Average, Max, Median, Min, StdDev and Sum'
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: Median
    singlePASS:
      name: singlePass
      in: query
      description: If TRUE computes all aggregation values in a single pass. Its default value is set true
      required: false
      allowEmptyValue: true
      schema:
        type: boolean
      example: true
    firstgeom:
      name: geom1
      in: query
      description: user defined geometry in terms of geoJSON
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: null
    col1Param:
      name: col1
      in: query
      description: Column name on which the arithmetic operation has to be performed
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: lat
    col2Param:
      name: col2
      in: query
      description: column name on which the arithmetic operation has to be performed
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: lon
    airthoperatorname:
      name: operator
      in: query
      description: 'Arithmetic operators which are acceptable are +, -, *, /'
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: +
    propertyNameParam:
      name: propertyName
      in: query
      description: Pass the column names list which you want to display in the resultant. Optional in case of order(sortBy). Mandatory in case of 'groupBy'.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'street,poi'
    startIndexParam:
      name: startIndex
      in: query
      description: 'To set the start index from which the user wants the result to be displayed. Applicable for ''query'', ''uniqueValue'' and ''summerizeValue''.'
      required: false
      allowEmptyValue: false
      schema:
        type: number
      example: 1
    groupByParam:
      name: groupBy
      in: query
      description: Pass ‘true’ to perform groupBy on the datsetNme. Applicable for 'query'. 'propertyName' paramter is mandatory for 'groupBy' parameter.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'true'
    groupByDatasetParam:
      name: groupBy
      in: query
      description: Pass ‘true’ to perform groupBy on the datsetNme. 'propertyName' paramter is mandatory for 'groupBy' parameter.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'true'
    orderByParam:
      name: sortBy
      in: query
      description: Pass ‘A' for ascending and ‘D’ for descending to perform order(sort) By. Applicable for all. Mandatory when order(sort) By is to be performed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: A
    orderByDatasetParam:
      name: sortBy
      in: query
      description: Pass ‘A' for ascending and ‘D’ for descending to perform order(sort) By. Mandatory when order(sort) By is to be performed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: A
    orderByPropertyParam:
      name: sortByProperty
      in: query
      description: Pass the column names which the user wants to order(sort) By in the resultant. Applicable for 'query'. Mandatory when order(sort) By is to be performed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'poi,street'
    orderByPropertyDatasetParam:
      name: sortByProperty
      in: query
      description: Pass the column names which the user wants to order(sort) By in the resultant. Mandatory when order(sort) By is to be performed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'poi,street'
    countParam:
      name: count
      in: query
      description: 'To fix the number of results to be returned. Applicable for ''query'', ''uniqueValue'' and ''summerizeValue''.'
      required: false
      allowEmptyValue: false
      schema:
        type: number
      example: 3
    bboxParam:
      name: bbox
      in: query
      description: Returns the bounding box of the dataset if set as true.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'false'
    queryParam:
      name: query
      in: query
      description: 'Query to be applied on the dataset. Mandatory if uniqueValue, summerizeValue and queryType parameter is not passed. This is an optional paramter when queryType = ''functionBased'' is passed.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: st_name='Andhra Pradesh'
    query1Param:
      name: query
      in: query
      description: Query to be applied on the dataset. Mandatory if uniqueValue and summerizeValue parameter is not passed.
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: st_name='Andhra Pradesh'
    uniqueValueParam:
      name: uniqueValue
      in: query
      description: Unique values of a attribute of the dataset. Mandatory if query and summerizeValue parameter is not passed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: st_name
    summerizeValueParam:
      name: summerizeValue
      in: query
      description: Summerize values of a attribute of the dataset. Mandatory if query and uniqueValue parameter is not passed.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: st_name
    sortByParam:
      name: sortBy
      in: query
      description: 'Sort the result in ascending(A) or descending(D) order. Applicable for ''orderBy'', ''groupBy'', ''uniqueValue'' and ''summerizeValue''.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: A
    queryTypeParam:
      name: queryType
      in: query
      description: 'queryType value can be <b>basic, spatialOperation</b> or <b>functionBased</b>.'
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: functionBased
    comparisonFunctionParam:
      name: comparisonFunction
      in: query
      description: 'The functions allowed are: <b>Area, Length</b> and <b>isEmpty</b>. This parameter is mandatory for queryType functionBased.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: Area
    comparisonOperatorParam:
      name: comparisonOperator
      in: query
      description: 'The operators allowed are: =, >, <, <>, >= and <=. This parameter is mandatory for queryType functionBased.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: =
    comparisonValueParam:
      name: comparisonValue
      in: query
      description: 'The values allowed are: <li>Numeric (in meters) (for comparisonFunction area and length)</li><li>Boolean (for comparisonFunction isEmpty)</li>. <br>This parameter is mandatory for queryType functionBased.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: '100'
    datasetSourceParam:
      name: datasetSource
      in: query
      description: Source dataset name. Mandatory both in case of Spatial as well as Non-Spatial Query.
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: geocode_ii
    datasetRefParam:
      name: datasetRef
      in: query
      description: Source dataset name. Mandatory both in case of Non-Spatial Query.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: geocode_iii
    operatorParam:
      name: operator
      in: query
      description: 'Mandatory both in case of Spatial as well as Non-Spatial Query. <ul><li>Operators allowed for <b>queryType = ''basic''</b> are: </li><=, >=, =, <, >, <>, IN and NOT IN</li><li>Operators allowed for <b>queryType = ''spatialOperation''</b> are:</li> Intersects, Disjoint, Overlaps, Equals, Touches, DWithin, Within, Contains and Crosses</ul>'
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: Intersects
    sourcePropertyParam:
      name: sourceProperty
      in: query
      description: Source property attributes to be queried. Mandatory both in case of Spatial(between 2 datasets) as well as Non-Spatial Query.
      required: true
      allowEmptyValue: false
      schema:
        type: string
      example: id
    refPropertyParam:
      name: refProperty
      in: query
      description: Reference property attributes to be queried. Mandatory in case of Non-Spatial Query.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: id
    selectionParamSourceParam:
      name: selectionParamSource
      in: query
      description: 'Source property attributes to be reflected in the result. Optional in case of arithmetic operations, Spatial(between 2 datasets) as well as Non-Spatial Query.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'id, lat'
    selectionParamRefParam:
      name: selectionParamRef
      in: query
      description: Reference property attributes to be reflected in the result. Optional both in case of Spatial(between 2 datasets) as well as Non-Spatial Query.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'osm_id, name'
    userGeom:
      name: userGeom
      in: query
      description: Value of UserGeom will be 'true' if user wants to perform spatial filters with user-defined geometry.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: true
    userGeomGeom:
      name: userGeom
      in: query
      description: Value of UserGeom will be 'true' if user wants to perform geometric operations with user-defined geometry.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: true
    queryTypeSingleParam:
      name: queryType
      in: query
      description: queryType value should be functionBased. Mandatory when user has to perform geometric operations with or without query.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: functionBased
    propertyNameSingleParam:
      name: propertyName
      in: query
      description: Property attributes to be reflected in the result. If not passed all the columns of the datasetNme will be displayed in the resultant.
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: housenumber
    comparisonFunctionSingleParam:
      name: comparisonFunction
      in: query
      description: 'The functions allowed are: <b>Area</b> and <b>Length</b>. This parameter is mandatory for queryType functionBased. Applicable for only queryType = ''functionBased'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: Area
    comparisonOperatorSingleParam:
      name: comparisonOperator
      in: query
      description: 'The operators allowed are: =, >, <, <>, >= and <=. This parameter is mandatory for queryType functionBased. Applicable for only queryType = ''functionBased'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: =
    comparisonValueSingleParam:
      name: comparisonValue
      in: query
      description: The value should be in numeric (in meters). This parameter is mandatory for queryType functionBased. Applicable for only queryType = 'functionBased
      required: false
      allowEmptyValue: false
      schema:
        type: number
      example: 10
    saveAsNewDatasetSingleParam:
      name: saveAsNewDataset
      in: query
      description: Pass ‘true’ for the resultant to be saved in to user's workspace as a new table. Applicable for only queryType = 'functionBased
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: 'true'
    newDatasetNmeSingleParam:
      name: newDatasetNme
      in: query
      description: Name of the table in which the resulatnt has to be stored. This parameter is mandatory  if saveAsNewDataset = true. Applicable for only queryType = 'functionBased'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: geotest
    featureIDParam:
      name: featureID
      in: query
      description: feature id of the particular feature of the layer whose geometry is required.
      schema:
        type: string
      example: india.8
    filterParam:
      name: filter
      in: query
      description: query on the basis of which the geometry is required.
      allowEmptyValue: false
      schema:
        type: string
      example: id=368
    Geometry:
      name: geometry
      in: query
      description: 'User defined geometry will be of geoJSON format. It will contain the geometry key-value part of the geojson. The geojson should contain the coordinates in <b>[lon, lat] format</b>.'
      required: false
      allowEmptyValue: false
      schema:
        type: string
      example: |-
        {
        "type":"MultiLineString","coordinates":[
        [
        [
        100.0,
        0.0
        ],
        [
        101.0,
        1.0
        ]
        ],
        [
        [
        102.0,
        2.0
        ]
        ,[
        103.0,
        3.0
        ]
        ]
        ]
        }
  schemas:
    getDatasetRes:
      title: getDataset
      type: object
      properties:
        code:
          type: string
          description: Response code.
          example: '200'
        result:
          type: object
          properties:
            type:
              type: string
              example: FeatureCollection
            features:
              type: array
              items:
                type: object
                properties:
                  type:
                    type: string
                    example: feature
                  id:
                    type: string
                    example: india.1
                    description: feature id of the feature attribute.
                  geometry:
                    type: string
                    description: geometry of the feature attribute.
                    example: 'null'
                  properties:
                    type: object
                    properties:
                      st_name:
                        type: string
                        example: ANDAMAN AND NICOBAR ISLANDS
            totalFeatures:
              type: number
              example: 35
            numberMatched:
              type: number
              example: 35
            numberReturned:
              type: number
              example: 1
            timestamp:
              type: string
              example: '2020-08-10T13:59:51.624Z'
            links:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                    example: next page
                  type:
                    type: string
                    example: application/json
                  rel:
                    type: string
                    example: next
                  href:
                    type: string
                    example: 'http://localhost:8081/geoserver/wfs?PROPERTYNAME=st_name&TYPENAME=anjali%3Aindia&REQUEST=GetFeature&OUTPUTFORMAT=application%2Fjson&VERSION=2.0.0&SERVICE=WFS&COUNT=1&ISDENORMALIZED=false&STARTINDEX=1'
            crs:
              type: string
              example: 'null'
    ErrorObject206:
      title: Impartial Content ErrorObject
      type: object
      properties:
        code:
          type: number
          description: Error code.
          example: 206
        message:
          type: string
          description: Error message.
          example: Invalid UniqueValue.
    ErrorObject400:
      title: Geoserver ErrorObject
      type: object
      properties:
        error:
          type: string
          description: Error exception code.
          example: Invalid Parameter value
        message:
          type: string
          description: Error message.
          example: Layer not found.
        auth:
          type: string
          example: unsuccessful
        code:
          type: number
          description: Error code.
          example: 400
    ErrorObjectCommon:
      title: ErrorObject
      type: object
      properties:
        error:
          type: string
          description: No data found in Database.
          example: Bad request. Username not found.
    ErrorObjectCommon404:
      title: ErrorObject
      type: object
      properties:
        error:
          type: string
          description: No data found in Database.
          example: No data found in Database.
    ErrorObject500:
      title: Internal Server ErrorObject
      type: object
      properties:
        error:
          type: string
          description: Internal server error.
          example: Something went wrong.
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
